# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Section 10 - API Testing with Playwright and Build mix of Web & API tests >> Lecture 049 - End to end validation with mix of API & Web concepts - Reduce test time
- Location: /Users/luisjaviermedinacoca/Desktop/WORKCENTER/[Playwright]/playwright-automation/tests/section10/lecture049.spec.js:82:3

# Error details

```
Error: expect(received).toBeTruthy()

Received: false
    at /Users/luisjaviermedinacoca/Desktop/WORKCENTER/[Playwright]/playwright-automation/tests/section10/lecture049.spec.js:137:38
```

# Page snapshot

```yaml
- navigation:
  - link "Automation Automation Practice":
    - heading "Automation" [level=3]
    - paragraph: Automation Practice
  - list:
    - listitem:
      - button " HOME"
    - listitem
    - listitem:
      - button " ORDERS"
    - listitem:
      - button " Cart"
    - listitem:
      - button "Sign Out"
- text: Loading....
```

# Test source

```ts
   37 |           headers: {
   38 |             "Content-Type": "application/json",
   39 |           },
   40 |         }
   41 |       );
   42 |
   43 |       expect(loginResponse.ok()).toBeTruthy();
   44 |       expect(loginResponse.status()).toBe(200);
   45 |
   46 |       const loginResponseJson = await loginResponse.json();
   47 |       expect(loginResponseJson.token).toBeDefined();
   48 |
   49 |       token = loginResponseJson.token;
   50 |       process.env.authToken = token;
   51 |
   52 |       console.log("Token obtenido:", token);
   53 |     } catch (error) {
   54 |       console.error("Error durante el login:", error);
   55 |       throw error;
   56 |     }
   57 |   });
   58 |
   59 |   test.beforeEach(async ({ page, request }) => {
   60 |     //...
   61 |     // 📌 Inject token in each test case:
   62 |     await page.addInitScript((value) => {
   63 |       window.localStorage.setItem("token", value);
   64 |     }, token);
   65 |   });
   66 |
   67 |   test("Lecture 047 - Parsing API response & passing token to browser local storage with Playwright", async ({
   68 |     page,
   69 |   }) => {
   70 |     //Login API
   71 |     // await page.addInitScript((value) => {
   72 |     //   window.localStorage.setItem("token", value);
   73 |     // }, token);
   74 |
   75 |     await page.goto("https://rahulshettyacademy.com/client/");
   76 |     await page.locator('button[routerlink="/dashboard/myorders"]').click();
   77 |     await page.waitForTimeout(500);
   78 |     await page.getByRole("button", { name: "Sign Out" }).click();
   79 |     await page.waitForTimeout(500);
   80 |   });
   81 |
   82 |   test("Lecture 049 - End to end validation with mix of API & Web concepts - Reduce test time", async ({
   83 |     page,
   84 |     request,
   85 |   }) => {
   86 |     // Login API
   87 |     // await page.addInitScript((value) => {
   88 |     //   window.localStorage.setItem("token", value);
   89 |     // }, token);
   90 |
   91 |     await page.goto("https://rahulshettyacademy.com/client/");
   92 |
   93 |     try {
   94 |       console.log("Valor de request:", request);
   95 |       console.log("Order Payload:", orderPayload);
   96 |       console.log("Headers:", {
   97 |         Authorization: token,
   98 |         "Content-Type": "application/json",
   99 |       });
  100 |
  101 |       const orderResponse = await request.post(
  102 |         "https://rahulshettyacademy.com/api/ecom/order/create-order",
  103 |         {
  104 |           data: orderPayload,
  105 |           headers: {
  106 |             Authorization: token,
  107 |             "Content-Type": "application/json",
  108 |           },
  109 |         }
  110 |       );
  111 |
  112 |       console.log("orderResponse.ok(): ", orderResponse.ok());
  113 |       expect(orderResponse.ok()).toBeTruthy();
  114 |       console.log("expect(orderResponse.ok()).toBeTruthy()");
  115 |
  116 |       console.log("orderResponse.status()", orderResponse.status());
  117 |       expect(orderResponse.status()).toBe(201); // El status de creación de orden es 201
  118 |       console.log("expect(orderResponse.status()).toBe(201)");
  119 |
  120 |       const orderResponseJson = await orderResponse.json();
  121 |       console.log("📌 orderResponseJson: ", orderResponseJson);
  122 |       expect(orderResponseJson.orders).toBeDefined(); // verify orderResponseJson is not "Undefined"
  123 |
  124 |       const newOrders = orderResponseJson.orders; //array
  125 |       const orderIds = orderResponseJson.orders.length; //array length
  126 |
  127 |       for (orderId of newOrders) {
  128 |         console.log("my new Order ID: ", orderId);
  129 |       }
  130 |
  131 |       orderId = orderResponseJson.orders[0];
  132 |       const orderLink = await page.locator('button[routerlink="/dashboard/myorders"]');
  133 |       await orderLink.click();
  134 |
  135 |       const rows = await page.locator("tbody .ng-star-inserted");
  136 |
> 137 |       expect(await rows.isVisible()).toBeTruthy();
      |                                      ^ Error: expect(received).toBeTruthy()
  138 |       console.log("expect(await rows.isVisible()).toBeTruthy()");
  139 |
  140 |       for (let i = 0; i < (await rows.count()); i++) {
  141 |         const rowOrderId = await rows.nth(i).locator("th").textContent();
  142 |         console.log(rowOrderId);
  143 |       }
  144 |       await page.waitForTimeout(1500);
  145 |
  146 |       await page.getByRole("button", { name: "Sign Out" }).click();
  147 |       await page.waitForTimeout(3500);
  148 |     } catch (error) {
  149 |       console.error("Error al crear la orden:", error);
  150 |       throw error;
  151 |     }
  152 |   });
  153 |
  154 |   test("Verificar request fixture", async ({ page, request }) => {
  155 |     console.log("Request en test simple:", request);
  156 |     expect(request).toBeDefined();
  157 |
  158 |     // await page.addInitScript((value) => {
  159 |     //   window.localStorage.setItem("token", value);
  160 |     // }, token);
  161 |
  162 |     await page.goto("https://rahulshettyacademy.com/client/");
  163 |     await page.getByRole("button", { name: "Sign Out" }).click();
  164 |     await page.waitForTimeout(2000);
  165 |   });
  166 | });
  167 |
```